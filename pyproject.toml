[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "cognitive-toolworks"
version = "0.1.0"
description = "A library of small, composable Skills using Anthropic's SKILL.md format"
readme = "README.md"
requires-python = ">=3.9"
license = "Apache-2.0"
authors = [
    {name = "cloud.gov OCS"}
]
keywords = ["skills", "anthropic", "llm", "progressive-disclosure"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "pyyaml>=6.0",
    "jsonschema>=4.0",
    "requests>=2.28",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.0",
    "pytest-cov>=5.0",
    # Formatting
    "black>=24.0",
    # Linting
    "ruff>=0.3",
    # Type checking
    "mypy>=1.9",
    "types-pyyaml>=6.0",
    "types-jsonschema>=4.0",
    "types-requests>=2.0",
    # Optional dependencies for tooling
    "numpy>=1.24",
    "scikit-learn>=1.3",
    # Security
    "pip-audit>=2.7",
    "bandit>=1.7",
    # Pre-commit
    "pre-commit>=3.6",
]

[tool.setuptools.packages.find]
include = ["tooling*"]
exclude = ["index*", "agents*", "skills*", "tests*"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | index/embeddings
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "W",    # pycodestyle warnings
    "UP",   # pyupgrade
    "S",    # flake8-bandit (security)
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EM",   # flake8-errmsg
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "PIE",  # flake8-pie
    "PYI",  # flake8-pyi
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "ARG",  # flake8-unused-arguments
    "PLE",  # pylint errors
    "PLW",  # pylint warnings
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # use of assert (ok in tests)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**" = ["S101", "ARG001", "PLR2004"]  # Allow assert, unused args, magic values in tests

[tool.mypy]
python_version = "3.11"
strict = true
warn_unused_configs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
no_implicit_reexport = true
strict_equality = true

# Relax strict mode for specific cases
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = [
    "yaml.*",
    "jsonschema.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["tooling"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
# TODO: Add unit tests for tooling/ scripts and restore fail_under = 80
# Currently set to 0 to allow CI to pass until tests are implemented
fail_under = 0
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
]
show_missing = true
skip_covered = false

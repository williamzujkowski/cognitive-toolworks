# Example: GitHub Actions CI/CD Pipeline for Node.js + Docker + AWS ECS

INPUT:
{
  "platform": "github-actions",
  "tech_stack": ["nodejs", "docker", "aws-ecs"],
  "requirements": {
    "testing": ["unit", "integration"],
    "security_gates": ["sast", "sca", "secret-scan"],
    "deployment_strategy": "rolling"
  },
  "infrastructure": {
    "cloud_provider": "aws",
    "iac_tool": "terraform",
    "environments": ["staging", "production"]
  }
}

OUTPUT SUMMARY:
- Pipeline: .github/workflows/ci-cd.yml (3 stages: build/test, security, deploy)
- IaC: terraform/ (modules: vpc, ecs-cluster, ecs-service, alb)
- Observability: CloudWatch metrics + alarms, ECS service logs
- Deployment: Rolling update via ECS task definition update
- Security: Snyk SCA, Semgrep SAST, TruffleHog secret scan, Trivy container scan
- Estimated runtime: 6-9 minutes (build 3min, test 2min, security 2min, deploy 2min)

DEPLOYMENT FLOW:
1. Code push to 'main' → trigger workflow
2. Build: npm install, lint, test (with coverage gate ≥80%)
3. Security: parallel scans (fail on critical vulnerabilities)
4. Docker: build image, scan with Trivy, push to ECR
5. Deploy staging: terraform apply (auto-approved), ECS rolling update
6. Smoke tests on staging endpoint
7. Manual approval gate for production
8. Deploy production: terraform apply, ECS rolling update with health checks
9. Post-deployment: verify CloudWatch alarms, send Slack notification

---
skill: "secrets-management-integrator"
version: "1.0.0"
description: "Evaluation scenarios for secrets management integration patterns"

scenarios:
  - name: "vault-kubernetes-dynamic-database-creds"
    description: "Integrate Vault with Kubernetes for dynamic PostgreSQL credentials"
    inputs:
      secrets_backend: "vault"
      integration_target: "kubernetes"
      rotation_policy: "dynamic"
      credential_type: "database"
    expected_outputs:
      - secrets_config.authentication_method: "kubernetes"
      - access_policies.policy_type: "vault-policy"
      - deployment_manifests[0].type: "kubernetes"
      - rotation_scripts.rotation_type: "vault-engine"
    success_criteria:
      - "SecretStore manifest includes Vault server URL"
      - "ExternalSecret references database/creds path"
      - "Kubernetes auth configured with service account"
      - "Refresh interval set to 1 hour or less"

  - name: "aws-secrets-manager-rds-rotation"
    description: "Configure AWS Secrets Manager with automatic RDS password rotation"
    inputs:
      secrets_backend: "aws-secrets"
      integration_target: "application"
      rotation_policy: "automatic"
      credential_type: "database"
    expected_outputs:
      - secrets_config.backend_endpoint: "matches AWS region pattern"
      - access_policies.policy_type: "iam-policy"
      - rotation_scripts.rotation_type: "lambda"
      - rotation_scripts.schedule: "30-90 day range"
    success_criteria:
      - "IAM policy includes secretsmanager:GetSecretValue"
      - "Lambda rotation function configured"
      - "CloudWatch Events rule for rotation schedule"
      - "KMS encryption enabled"

  - name: "azure-keyvault-managed-identity"
    description: "Integrate Azure Key Vault with application using managed identity"
    inputs:
      secrets_backend: "azure-keyvault"
      integration_target: "application"
      rotation_policy: "manual"
      credential_type: "api-key"
    expected_outputs:
      - secrets_config.authentication_method: "managed-identity"
      - access_policies.policy_type: "rbac-assignment"
      - integration_code.language: "python|go|nodejs|java"
    success_criteria:
      - "RBAC role is 'Key Vault Secrets User' or more restrictive"
      - "Application code uses Azure Identity SDK"
      - "No credentials in application configuration"
      - "SDK includes error handling and retry logic"

  - name: "gcp-secret-manager-workload-identity"
    description: "Configure GCP Secret Manager with GKE workload identity"
    inputs:
      secrets_backend: "gcp-secretmanager"
      integration_target: "kubernetes"
      rotation_policy: "automatic"
      credential_type: "generic"
    expected_outputs:
      - secrets_config.authentication_method: "workload-identity"
      - access_policies.policy_type: "iam-binding"
      - deployment_manifests[0].type: "kubernetes"
    success_criteria:
      - "IAM binding includes roles/secretmanager.secretAccessor"
      - "Kubernetes service account annotated with GCP service account"
      - "ExternalSecret configured with gcpSecretsManager provider"
      - "Workload identity federation configured"

  - name: "cicd-vault-jwt-auth"
    description: "Integrate Vault with GitHub Actions using JWT authentication"
    inputs:
      secrets_backend: "vault"
      integration_target: "cicd"
      rotation_policy: "manual"
      credential_type: "generic"
    expected_outputs:
      - secrets_config.authentication_method: "jwt"
      - access_policies.policy_document: "includes path-based permissions"
      - integration_code.language: "bash|python|go"
    success_criteria:
      - "Vault JWT auth method configured for GitHub OIDC"
      - "Policy scoped to specific secret paths"
      - "GitHub Actions workflow includes Vault login step"
      - "Secrets injected as environment variables"
